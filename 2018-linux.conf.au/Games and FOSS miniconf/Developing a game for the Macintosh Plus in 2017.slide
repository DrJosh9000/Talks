Developing a game for the Macintosh Plus in 2017
Games and FOSS Miniconf, linux.conf.au 2018
11:35 21 Jan 2018
Tags: games, foss, miniconf, vintage, macintosh, C, retro68, retro, hypercard

Josh Deprez
Site Reliability Engineer, Google Australia
josh.deprez@gmail.com
https://github.com/DrJosh9000/Talks
@DrJosh9000

# This is a Go present file.
# You can view it by:
#  1. Install Go (golang.org)
#  2. go get -u golang.org/x/tools/cmd/present
#  3. Run `present -notes`
#  4. Open a browser with the URL it gives you and navigate to this file.

: Hello, welcome to my talk, etc

* Why?

* Mostly because...

.image macplus.jpg _ 600
.caption Macintosh Plus. Photo: J. Deprez

: Conference-driven development. 
: I wanted to demonstrate something using a heritage Macintosh at /dev/world 
: last year, and as part of that I made a small game.

* Why else?

: Fun. I have quite a high fun threshold, as you can probably tell.
: And all these other reasons.

- Fun
- Make new use of old hardware (retrocomputing)
- Massive portability (via emulators)
- I'm a filthy hipster
- Because I can
- Motorola 68000 CPU predates Meltdown & Spectre ;-)

* Okay, why not?

* The limiting hardware

: Reason 1: the hardware is limited by modern standards, though perhaps not limited relative to embedded work. 
: Expect a slow CPU, emulated floating point math, no more than 4 MB of RAM, a small monochrome display, 
: basic sound output, and limted or no internet access.

.image macpaint.jpg _ 600
.caption The gorgeous 9 inch, 512 x 384 display of an early Macintosh. Photo & Art: J. Deprez

* Accessibility issues

.image keyboard.jpg _ 600
.caption Keyboard forever! Photo: J. Deprez

: Reason 2: Whether you are deploying to an emulator or to the real thing, the early Macintoshes were built almost entirely upon "state-of-the-art" mouse and keyboard input modality. Modern systems can be more accessible, with though this is often untrue of games.

* Toolchain?

.image mpw.png _ 600
.caption Macintosh Programmers Workshop, running under Mini vMac.

: Reason 3: Period compilers and tools, such as Macintosh Programmers Workshop, are 
: an exercise in extreme frustration compared to modern text editors. My fun 
: threshold is not quite this high.

* Options for making a game

* Option 1: HyperCard

.image hypercard.png _ 600
.caption HyperCard - the original Twine?

: So there's HyperCard. Cyan, who you may know as the makers of Myst, are responsible for some seriously good HyperCard games back in the day: The Manhole, Spelunx, Cosmic Osmo, defining a genre of games to come.
: Think of HyperCard as being like Twine but with a fixed-size window.

* HyperCard Online

.image hypercard-online.png _ 600
.caption Upload your HyperCard stacks to the Internet Archive, to play in a web emulator! 
.caption Screenshot taken from [[hypercardonline.tk]].

* HyperCard Online

.image internet-archive.png _ 600
.caption [[https://archive.org/details/hypercardstacks][The Internet Archive HyperCard collection]].

: Devving in HyperCard is worth doing at least once. But it's not very Open Source - mostly just Abandonware.

* Option 2: Something something C

: This is the option I'm going to focus on for the rest of the talk.
: Basically, instead of using an old toolchain, we can use a new toolchain and
: cross-compile to the old architecture and OS.

* Getting Started

* Ingredients

Modern computer, compiler & toolchain. For this talk: [[https://github.com/autc04/Retro68][Retro68]].

: If you don't like modern C / C++11, there's always ASM, or Pascal, or old C with the original Macintosh Programmers Workshop...I guess?

Retro68 needs: Apple's legacy "Universal Interfaces"

- Can be extracted from (free, abandonware) Macintosh Programmers Workshop...
- [[https://storage.googleapis.com/awkward/InterfacesAndLibraries.zip][...or found online, somewhere.]]

* Recommended extras (1/2)

68k Macintosh emulator - strongly recommended for rapid development. 
Options (all open source!):

- [[http://www.gryphel.com/c/minivmac/index.html][Mini vMac]] (recommended!)
- [[http://www.hampa.ch/pce/][PCE]]
- [[https://basilisk.cebix.net/][Basilisk II]] (no longer maintained)
- Write & release your own?

.image minivmac.png _ 250

: Why a Mac emulator if you have the real thing?
: Copying even very small files onto vintage hardware can be tedious - either via floppy disk or networking.
: Fortunately, if your program runs correctly on Mini vMac, it's almost certainly going to work on the real thing. 

* Recommended extras (2/2)

Macintosh Plus ROM file and system software to make the emulator go.

ROM file: _Required_ for emulation, but has never been made available for free.

- [[https://github.com/macmade/Macintosh-ROMs][Easy to find...]]
- [[http://www.gryphel.com/c/minivmac/extras/copyroms/][Can be dumped from original hardware.]]

System 6: *was* freely available from Apple, now abandonware, seemingly.

- Try [[http://macintoshgarden.org][Macintosh Garden]].

Utilities of the era (more abandonware)

- ResEdit, MacPaint, ClarisWorks

* How to Retro68

* Retro68

It's GCC, essentially - with some extras:

- libretro (part of the magic)
- ResourceFiles & Rez
- MakeAPPL, LaunchAPPL

Now supports Ninja in addition to Cmake!

* Demo time!

* Getting things onto your old Mac

* Transferring files

Options:

- Floppy disks? (No disk drive)
- [[http://netatalk.sourceforge.net/][Netatalk (v2)]]? (No physical bridge)
- [[https://www.bigmessowires.com/floppy-emu/][FloppyEmu]].

If you're going to buy something, Floppy Emu is recommended.

: Who owns a floppy drive these days?
: Can you bridge Old AppleTalk and Ethernet?

* Notes

* What Mac to buy?

Macintosh Classic 

- Most durable

Macintosh Plus 

- Most popular, 
- ROM used by most emulators, 
- Prone to hardware failure.

Macintosh 128k 

- Tend to be expensive (first Mac)
- Extremely limited

Or build your own?

* MacPaint and QuickDraw 

Open source!*

*Sort of. Available from the [[http://www.computerhistory.org/atchm/macpaint-and-quickdraw-source-code/][Computer History Museum]]. 

_"This_Material_is_Copyright_Â©_1984_Apple_Inc._and_is_made_available_only_for_non-commercial_use."_

* Open-source Mac-era Games

: Good instructive reading on how to hold the APIs

- [[https://github.com/softdorothy/glider_4][Glider 4]] (also Glider Pro)
- [[https://github.com/softdorothy/pararena_2][Pararena 2]]
- [[https://github.com/softdorothy/glypha_III][Glypha III]]